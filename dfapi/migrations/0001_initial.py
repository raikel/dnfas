# Generated by Django 2.2.8 on 2020-01-06 15:57

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stream_url', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('location_lat', models.FloatField(blank=True, null=True)),
                ('location_lon', models.FloatField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Face',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='faces/')),
                ('box_bytes', models.BinaryField(blank=True, null=True)),
                ('landmarks_bytes', models.BinaryField(blank=True, null=True)),
                ('embeddings_bytes', models.BinaryField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('size_bytes', models.IntegerField(blank=True, default=0)),
                ('timestamp', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
            ],
            options={
                'ordering': ['-frame__timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='faces/')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('size_bytes', models.IntegerField(blank=True, default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('task', 'Task')], max_length=16)),
                ('dtype', models.CharField(choices=[('error', 'Task'), ('warn', 'Warn'), ('info', 'Info')], max_length=16)),
                ('title', models.CharField(max_length=255)),
                ('message', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('resource', models.IntegerField()),
                ('seen', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Recognition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_threshold', models.FloatField(blank=True, default=0.5)),
                ('max_matches', models.IntegerField(blank=True, default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('face', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recognitions', to='dfapi.Face')),
            ],
        ),
        migrations.CreateModel(
            name='Stat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.FloatField(default=0)),
                ('resolution', models.CharField(choices=[('hour', 'hour'), ('day', 'day'), ('all', 'all')], max_length=16)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(blank=True, db_index=True, max_length=255, unique=True)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('last_name', models.CharField(blank=True, default='', max_length=255)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('man', 'man'), ('women', 'woman')], default='', max_length=16)),
                ('skin', models.CharField(blank=True, choices=[('white', 'white'), ('black', 'black'), ('brown', 'brown')], default='', max_length=16)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('path', models.CharField(db_index=True, max_length=255, unique=True)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('finish_at', models.DateTimeField(blank=True, null=True)),
                ('frame_width', models.IntegerField(blank=True, null=True)),
                ('frame_height', models.IntegerField(blank=True, null=True)),
                ('size_bytes', models.IntegerField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('api_url', models.URLField()),
                ('username', models.CharField(blank=True, max_length=255)),
                ('password', models.CharField(blank=True, max_length=255)),
                ('max_load', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['updated_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoThumb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='video/thumbs')),
                ('video', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='thumbs', to='dfapi.VideoRecord')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('paused', 'Paused'), ('stopped', 'Stopped'), ('killed', 'Killed'), ('success', 'Success'), ('failure', 'Failure'), ('revoked', 'Revoked'), ('retry', 'Retry')], default='created', max_length=16)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('schedule_start_at', models.DateTimeField(blank=True, null=True)),
                ('schedule_stop_at', models.DateTimeField(blank=True, null=True)),
                ('repeat', models.BooleanField(blank=True, default=False)),
                ('repeat_days', models.CharField(blank=True, default='', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frames_count', models.IntegerField(blank=True, default=0)),
                ('faces_count', models.IntegerField(blank=True, default=0)),
                ('processing_time', models.FloatField(blank=True, default=0)),
                ('frame_rate', models.FloatField(blank=True, default=0)),
                ('progress', models.FloatField(blank=True, default=-1)),
                ('mode', models.CharField(blank=True, choices=[('all', 'Find all faces'), ('hunt', 'Hunt faces')], default='all', max_length=16)),
                ('detection_min_height', models.IntegerField(blank=True, null=True)),
                ('detection_min_score', models.FloatField(blank=True, null=True)),
                ('similarity_thresh', models.FloatField(blank=True, null=True)),
                ('max_frame_size', models.IntegerField(blank=True, null=True)),
                ('frontal_faces', models.BooleanField(blank=True, null=True)),
                ('video_detect_interval', models.FloatField(blank=True, null=True)),
                ('faces_time_memory', models.FloatField(blank=True, null=True)),
                ('store_face_frames', models.BooleanField(blank=True, null=True)),
                ('video_start_at', models.FloatField(blank=True, null=True)),
                ('video_stop_at', models.FloatField(blank=True, null=True)),
                ('camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='dfapi.Camera')),
                ('hunted_subjects', models.ManyToManyField(related_name='hunting_tasks', to='dfapi.Subject')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='dfapi.VideoRecord')),
                ('worker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='dfapi.Worker')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubjectSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disk_cached', models.BooleanField(blank=True, default=False)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('naming', models.CharField(blank=True, choices=[('named', 'named'), ('unnamed', 'unnamed'), ('', '')], default='', max_length=16)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('min_birthdate', models.DateField(blank=True, null=True)),
                ('max_birthdate', models.DateField(blank=True, null=True)),
                ('min_timestamp', models.DateField(blank=True, null=True)),
                ('max_timestamp', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, max_length=255)),
                ('skin', models.CharField(blank=True, max_length=255)),
                ('count', models.IntegerField(default=0)),
                ('model_path', models.CharField(blank=True, max_length=255)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('cameras', models.ManyToManyField(related_name='subject_segments', to='dfapi.Camera')),
                ('tasks', models.ManyToManyField(related_name='subject_segments', to='dfapi.Task')),
                ('videos', models.ManyToManyField(related_name='subject_segments', to='dfapi.VideoRecord')),
            ],
        ),
        migrations.AddField(
            model_name='subject',
            name='task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='dfapi.Task'),
        ),
        migrations.CreateModel(
            name='RecognitionMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(blank=True, null=True)),
                ('recognition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='dfapi.Recognition')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recognition_matches', to='dfapi.Subject')),
            ],
        ),
        migrations.AddField(
            model_name='recognition',
            name='filter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='dfapi.SubjectSegment'),
        ),
        migrations.AddField(
            model_name='recognition',
            name='segments',
            field=models.ManyToManyField(related_name='recognitions', to='dfapi.SubjectSegment'),
        ),
        migrations.CreateModel(
            name='HuntMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(blank=True, default=0)),
                ('matched_subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hunt_matches', to='dfapi.Subject')),
                ('target_subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hunt_targets', to='dfapi.Subject')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hunts', to='dfapi.Task')),
            ],
        ),
        migrations.AddField(
            model_name='face',
            name='frame',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faces', to='dfapi.Frame'),
        ),
        migrations.AddField(
            model_name='face',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faces', to='dfapi.Subject'),
        ),
    ]
